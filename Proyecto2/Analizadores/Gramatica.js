/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,24],$V2=[1,25],$V3=[1,27],$V4=[1,28],$V5=[1,26],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,35],$Va=[1,36],$Vb=[1,19],$Vc=[1,21],$Vd=[1,22],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[5,17,41,53,55,57,58,59,60,61,62,63,75,79,80,82,87,90,91],$Vi=[2,13],$Vj=[1,42],$Vk=[8,32],$Vl=[1,51],$Vm=[1,50],$Vn=[1,52],$Vo=[1,54],$Vp=[1,53],$Vq=[1,58],$Vr=[1,65],$Vs=[1,66],$Vt=[1,74],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,75],$VA=[1,76],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,82],$VF=[32,41,46],$VG=[1,86],$VH=[1,85],$VI=[1,109],$VJ=[1,108],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,114],$VP=[1,115],$VQ=[1,116],$VR=[1,117],$VS=[1,118],$VT=[1,119],$VU=[1,120],$VV=[8,24,25,26,27,28,31,32,48,64,66,67,68,69,70,71,72,73,76],$VW=[2,27],$VX=[1,141],$VY=[31,32,48],$VZ=[5,17,41,53,55,57,58,59,60,61,62,63,75,79,80,81,82,87,90,91],$V_=[1,176],$V$=[31,32],$V01=[8,24,25,31,32,48,64,66,67,68,69,70,71,72,73,76],$V11=[8,31,32,48,64,66,67,68,69,70,71,72,73,76],$V21=[1,203],$V31=[17,41,53,55,57,58,59,60,61,62,63,75,80,82,87,90,91],$V41=[2,85],$V51=[2,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"fn_print":7,"PYC":8,"declaracion":9,"fn_if":10,"fn_switch":11,"incre_o_decre":12,"ciclo_while":13,"inst_break":14,"ciclo_do_while":15,"ciclo_for":16,"CONTINUE":17,"fn_funcion":18,"llamada_funcion":19,"execute":20,"instr_return":21,"fn_metodo":22,"expresion":23,"RES":24,"MAS":25,"MUL":26,"DIV":27,"MOD":28,"POW":29,"PARIZQ":30,"COMA":31,"PARDER":32,"relacionales":33,"logicos":34,"NUMBER":35,"DOUBLE":36,"TRUE":37,"FALSE":38,"CADENA":39,"CARACTER":40,"ID":41,"casteos":42,"TOLOWER":43,"TOUPPER":44,"ROUND":45,"CIZQ":46,"lista_expresiones":47,"CDER":48,"tipos":49,"ASIGNACION":50,"NUEVO":51,"asignacion":52,"WHILE":53,"bloque":54,"DO":55,"decla_o_asigna":56,"FOR":57,"BREAK":58,"TIPO_INT":59,"TIPO_DOUBLE":60,"BOOL":61,"CHAR":62,"STD":63,"DPS":64,"STRING":65,"IGUAL":66,"DISTINTO":67,"MENOR":68,"MENORIGUAL":69,"MAYOR":70,"MAYORIGUAL":71,"AND":72,"OR":73,"NOT":74,"COUT":75,"CPR":76,"ENDL":77,"LLAVEIZQ":78,"LLAVEDER":79,"IF":80,"ELSE":81,"SWITCH":82,"cases":83,"defaults":84,"CASE":85,"DEFAULT":86,"TVOID":87,"lista_parametros":88,"parametro":89,"EXEC":90,"RETURN":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",17:"CONTINUE",24:"RES",25:"MAS",26:"MUL",27:"DIV",28:"MOD",29:"POW",30:"PARIZQ",31:"COMA",32:"PARDER",35:"NUMBER",36:"DOUBLE",37:"TRUE",38:"FALSE",39:"CADENA",40:"CARACTER",41:"ID",43:"TOLOWER",44:"TOUPPER",45:"ROUND",46:"CIZQ",48:"CDER",50:"ASIGNACION",51:"NUEVO",53:"WHILE",55:"DO",57:"FOR",58:"BREAK",59:"TIPO_INT",60:"TIPO_DOUBLE",61:"BOOL",62:"CHAR",63:"STD",64:"DPS",65:"STRING",66:"IGUAL",67:"DISTINTO",68:"MENOR",69:"MENORIGUAL",70:"MAYOR",71:"MAYORIGUAL",72:"AND",73:"OR",74:"NOT",75:"COUT",76:"CPR",77:"ENDL",78:"LLAVEIZQ",79:"LLAVEDER",80:"IF",81:"ELSE",82:"SWITCH",85:"CASE",86:"DEFAULT",87:"TVOID",90:"EXEC",91:"RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,6],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,1],[23,1],[23,1],[23,4],[23,4],[23,4],[23,4],[23,7],[23,1],[9,4],[9,10],[9,15],[9,8],[9,16],[52,3],[52,6],[13,5],[15,7],[56,1],[56,1],[12,1],[12,3],[12,3],[16,9],[14,2],[49,1],[49,1],[49,1],[49,1],[49,4],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[34,3],[34,3],[34,2],[7,3],[7,5],[54,3],[54,2],[10,5],[10,7],[10,7],[11,7],[11,8],[11,7],[83,6],[83,5],[84,4],[42,4],[18,5],[18,6],[22,5],[22,6],[88,3],[88,1],[89,2],[19,3],[19,4],[47,3],[47,1],[20,2],[21,3],[21,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]); 
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4: case 5: case 8: case 10: case 16: case 17: case 34:
 this.$ = $$[$0-1];
break;
case 6: case 7: case 9: case 11: case 12: case 13: case 15: case 18: case 19: case 27: case 28: case 37: case 43: case 53: case 54: case 55:
 this.$ = $$[$0];
break;
case 14:
 this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 20:
 this.$ = new Aritmetica(new Primitivo(0,0,0),$$[$0],OpAritmetica.RESTA,0,0);
break;
case 21:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,0,0);
break;
case 22:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,0,0);
break;
case 23:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,0,0);
break;
case 24:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,0,0);
break;
case 25:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.MODULO,0,0);
break;
case 26:
 this.$ =  new Aritmetica($$[$0-3],$$[$0-1],OpAritmetica.POTENCIA,0,0);
break;
case 29:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,0,0); 
break;
case 30:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,0,0); 
break;
case 31: case 32:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,0,0); 
break;
case 33:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,0,0); 
break;
case 35:
 this.$ =  new Primitivo($$[$0],TipoDato.CHAR,0,0); 
break;
case 36:
 this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 38:
 this.$ = new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 39:
 this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 40:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 41:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 42:
 this.$ = new AccesoVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 44:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 45:
 this.$ = new DeclaracionVector($$[$0-8], [$$[$0-1]], null, $$[$0-9], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 46:
 this.$ = new DeclaracionVector($$[$0-13], [$$[$0-6], $$[$0-3]], null, $$[$0-14], _$[$0-13].first_line, _$[$0-13].first_column);
break;
case 47:
 this.$ = new DeclaracionVector($$[$0-6], [$$[$0-1].length], $$[$0-1], $$[$0-7], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 48:
 this.$ = new DeclaracionVector($$[$0-14], [$$[$0-6].length, $$[$0-2].length], [$$[$0-6], $$[$0-2]], $$[$0-15], _$[$0-14].first_line, _$[$0-14].first_column);
break;
case 49:
 this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 50:
 this.$ = new AsignacionVector($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 51:
this.$ = new CWhile($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 52:
this.$ = new CDoWhile($$[$0-2],$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 56:
 this.$ = new Incremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 57:
 this.$ = new Decremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 58:
this.$ = new CFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 59:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 60:
 this.$ = TipoDato.NUMBER; 
break;
case 61:
 this.$ = TipoDato.DOUBLE; 
break;
case 62:
 this.$ = TipoDato.BOOLEANO; 
break;
case 63:
 this.$ = TipoDato.CHAR; 
break;
case 64:
 this.$ = TipoDato.STRING; 
break;
case 65:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,0,0);
break;
case 66:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,0,0);
break;
case 67:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,0,0);
break;
case 68:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,0,0);
break;
case 69:
 this.$ =  new Relacional($$[$0-2].valor,$$[$0],OpRelacional.MAYOR,0,0);
break;
case 70:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,0,0);
break;
case 71:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,0,0);
break;
case 72:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,0,0);
break;
case 73:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,0,0);
break;
case 74:
 this.$ = new Print($$[$0]); 
break;
case 75:
 this.$ = new Print($$[$0-2],true,0,0)
break;
case 76:
 this.$ = new Bloque($$[$0-1]);
break;
case 77:
 this.$ = new Bloque([]) 
break;
case 78:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,0,0);
break;
case 79: case 80:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],0,0);
break;
case 81:
 this.$ = new Switch($$[$0-4],$$[$0-1],null);
break;
case 82:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],0,0);
break;
case 83:
 this.$ = new Switch($$[$0-4],null,$$[$0-1],0,0);
break;
case 84:
 $$[$0-5].push(new Case($$[$0-3], $$[$0-1])); this.$ = $$[$0-5]; 
break;
case 85:
 this.$ = [new Case($$[$0-3], $$[$0-1])]; 
break;
case 86:
 this.$ = new Default($$[$0-1]); 
break;
case 87:
 this.$ = new Casteo($$[$0-2].valor, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 88:
this.$ = new Funcion(TipoDato.VOID,$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 89:
this.$ = new Funcion(TipoDato.VOID,$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 90:
this.$ = new Metodos($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 91:
this.$ = new Metodos($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 92: case 97:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 93: case 98:
this.$ = [$$[$0]];
break;
case 94:
this.$ = ({id:$$[$0],tipo:$$[$0-1]}); 
break;
case 95:
this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 96:
this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 99:
this.$ = new Execute($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 100:
this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 101:
this.$ = new Return(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},{1:[3]},{5:[1,37],6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},o($Vh,[2,3]),{8:[1,39]},{8:[1,40]},o($Vh,[2,6]),o($Vh,[2,7]),{8:[1,41]},o($Vh,[2,9]),o($Vh,$Vi,{8:$Vj}),o($Vh,[2,11]),o($Vh,[2,12]),{8:[1,43]},o($Vh,[2,15]),{8:[1,44]},{8:[1,45]},o($Vh,[2,18]),o($Vh,[2,19]),{76:[1,46]},{41:[1,47]},{30:[1,48]},{30:[1,49]},o($Vk,[2,55]),{24:$Vl,25:$Vm,30:$Vn,46:$Vo,50:$Vp},{30:[1,55]},{8:[1,56]},{54:57,78:$Vq},{30:[1,59]},{41:[1,60]},{19:61,41:[1,62]},{8:[1,64],19:81,23:63,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},o($VF,[2,60]),o($VF,[2,61]),o($VF,[2,62]),o($VF,[2,63]),{64:[1,83]},{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,8]),o($Vh,[2,10]),o($Vh,[2,14]),o($Vh,[2,16]),o($Vh,[2,17]),{19:81,23:84,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{30:[1,87],46:$VG,50:$VH},{19:81,23:88,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:89,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{25:[1,90]},{24:[1,91]},{19:81,23:94,24:$Vr,29:$Vs,30:$Vt,32:[1,92],33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,47:93,74:$VE},{19:81,23:95,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:96,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:97,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},o([5,8,17,41,53,55,57,58,59,60,61,62,63,75,79,80,82,85,86,87,90,91],[2,59]),{53:[1,98]},{4:99,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,79:[1,100],80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},{9:102,41:[1,105],49:104,52:103,56:101,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{30:[1,106]},{8:[2,99]},{30:$Vn},{8:[1,107],24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},o($Vh,[2,101]),{19:81,23:121,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{30:[1,122]},o($VV,$VW),o($VV,[2,28]),o($VV,[2,29]),o($VV,[2,30]),o($VV,[2,31]),o($VV,[2,32]),o($VV,[2,33]),{19:81,23:123,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,49:124,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,74:$VE},o($VV,[2,35]),o($VV,[2,36],{30:$Vn,46:[1,125]}),o($VV,[2,37]),{30:[1,126]},{30:[1,127]},{30:[1,128]},o($VV,[2,43]),{19:81,23:129,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{64:[1,130]},{8:[2,74],24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU,76:[1,131]},{19:81,23:132,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{48:[1,133]},{32:[1,134],49:137,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,88:135,89:136},{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,138],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,139],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},o($Vk,[2,56]),o($Vk,[2,57]),o($VV,[2,95]),{31:$VX,32:[1,140]},o($VY,[2,98],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU}),o($Vk,[2,49],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU}),{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,48:[1,142],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,143],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{30:[1,144]},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,79:[1,145],80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},o($VZ,[2,77]),{8:[1,146]},{8:[2,53]},{8:[2,54]},{41:[1,147]},{46:$Vo,50:$Vp},{32:[1,148],49:137,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,88:149,89:136},o($Vh,[2,100]),{19:81,23:150,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:151,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:152,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:153,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:154,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:155,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:156,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:157,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:158,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:159,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:160,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:161,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:162,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},o($VV,[2,20]),{19:81,23:163,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,164],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{32:[1,165]},{19:81,23:94,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,47:166,74:$VE},{19:81,23:167,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:168,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:169,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},o([8,31,32,48,64,76],[2,73],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU}),{65:[1,170]},{77:[1,171]},{8:[2,44],24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{46:[1,173],50:[1,172]},{54:174,78:$Vq},{31:$V_,32:[1,175]},o($V$,[2,93]),{41:[1,177]},{54:178,78:$Vq},{78:[1,179]},o($VV,[2,96]),{19:81,23:180,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{50:[1,181]},{54:182,78:$Vq},{19:81,23:183,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},o($VZ,[2,76]),{19:81,23:185,24:$Vr,29:$Vs,30:$Vt,33:184,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{46:$VG,50:$VH},{54:186,78:$Vq},{31:$V_,32:[1,187]},o($V01,[2,21],{26:$VK,27:$VL,28:$VM}),o($V01,[2,22],{26:$VK,27:$VL,28:$VM}),o($VV,[2,23]),o($VV,[2,24]),o($VV,[2,25]),o($V11,[2,65],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM}),o($V11,[2,66],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM}),o($V11,[2,67],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM}),o($V11,[2,68],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM}),o($V11,[2,69],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM}),o($V11,[2,70],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM}),o([8,31,32,48,64,72,73,76],[2,71],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS}),o([8,31,32,48,64,73,76],[2,72],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT}),{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,31:[1,188],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},o($VV,[2,34]),{19:81,23:189,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{31:$VX,48:[1,190]},{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,191],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,192],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,193],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},o($VF,[2,64]),{8:[2,75]},{46:[1,195],51:[1,194]},{48:[1,196]},o($Vh,[2,90]),{54:197,78:$Vq},{49:137,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,89:198},o($V$,[2,94]),o($Vh,[2,78],{81:[1,199]}),{83:200,84:201,85:[1,202],86:$V21},o($VY,[2,97],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU}),{19:81,23:204,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},o($Vh,[2,51]),{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,205],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},o([24,25,26,27,28,66,67,68,69,70,71,72,73],$VW,{8:[1,206]}),{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},o($Vh,[2,88]),{54:207,78:$Vq},{19:81,23:208,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},o($VV,[2,87]),o($VV,[2,41],{46:[1,209]}),o($VV,[2,38]),o($VV,[2,39]),o($VV,[2,40]),{49:210,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{19:81,23:94,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,47:211,74:$VE},{50:[1,212]},o($Vh,[2,91]),o($V$,[2,92]),{10:214,54:213,78:$Vq,80:$Vc},{79:[1,215],84:216,85:[1,217],86:$V21},{79:[1,218]},{19:81,23:219,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{64:[1,220]},o($Vk,[2,50],{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU}),{8:[1,221]},{12:222,41:[1,223],52:23},o($Vh,[2,89]),{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,32:[1,224],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{19:81,23:94,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,47:225,74:$VE},{46:[1,226]},{31:$VX,48:[1,227]},{46:[1,229],51:[1,228]},o($Vh,[2,79]),o($Vh,[2,80]),o($Vh,[2,81]),{79:[1,230]},{19:81,23:231,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},o($Vh,[2,83]),{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,64:[1,232],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{4:233,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},o($Vh,[2,52]),{32:[1,234]},{24:$Vl,25:$Vm,46:$Vo,50:$Vp},o($VV,[2,26]),{31:$VX,48:[1,235]},{19:81,23:94,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,47:236,74:$VE},{8:[2,47]},{49:237,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va},{46:[1,238]},o($Vh,[2,82]),{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,64:[1,239],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{4:240,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:241,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},{54:242,78:$Vq},o($VV,[2,42]),{31:$VX,48:[1,243]},{46:[1,244]},{19:81,23:94,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,47:245,74:$VE},{4:246,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:247,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},o($V31,$Vi,{8:$Vj,79:[2,86]}),o($Vh,[2,58]),{8:[2,45]},{19:81,23:94,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,47:248,74:$VE},{31:$VX,48:[1,249]},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:250,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,22:18,41:$V1,49:20,52:23,53:$V2,55:$V3,57:$V4,58:$V5,59:$V6,60:$V7,61:$V8,62:$V9,63:$Va,75:$Vb,80:$Vc,82:$Vd,87:$Ve,90:$Vf,91:$Vg},o($V31,$Vi,{8:$Vj,79:$V41,85:$V41,86:$V41}),{31:$VX,48:[1,251]},{31:[1,252]},o($V31,$Vi,{8:$Vj,79:$V51,85:$V51,86:$V51}),{46:[1,253]},{46:[1,254]},{19:81,23:255,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,74:$VE},{19:81,23:94,24:$Vr,29:$Vs,30:$Vt,33:67,34:68,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:77,43:$VB,44:$VC,45:$VD,47:256,74:$VE},{24:$VI,25:$VJ,26:$VK,27:$VL,28:$VM,48:[1,257],66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR,71:$VS,72:$VT,73:$VU},{31:$VX,48:[1,258]},{8:[2,46]},{48:[1,259]},{8:[2,48]}],
defaultActions: {37:[2,1],61:[2,99],102:[2,53],103:[2,54],171:[2,75],227:[2,47],243:[2,45],257:[2,46],259:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../dist/src/Expresion/Aritmetica");
    const {Relacional} = require("../dist/src/Expresion/Relacionales");
    const {Logico} = require("../dist/src/Expresion/Logicos");
    const {Primitivo} = require("../dist/src/Expresion/Primitivo");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../dist/src/Expresion/Resultado");
    const {Print} = require("../dist/src/Instruccion/Print");
    const {Bloque} = require("../dist/src/Instruccion/Bloque");
    const {Llamada} = require("../dist/src/Instruccion/Llamada");
    const {Execute} = require("../dist/src/Instruccion/Execute");
    const {FN_IF} = require("../dist/src/Instruccion/Control/IF");
    const {AST} = require("../dist/src/AST");
    const {Simbolo} = require("../dist/src/TablaSimbolos/Simbolo");
    const {TablaSimbolos} = require("../dist/src/TablaSimbolos/Tablita");
    const {Ternario} = require("../dist/src/Instruccion/Control/Ternario");
    const {Switch} = require("../dist/src/Instruccion/Control/Switch");
    const {Case} = require("../dist/src/Instruccion/Case");
    const {Default} = require("../dist/src/Instruccion/Default");
    const {Acceso} = require("../dist/src/Expresion/Acceso");
    const {Asignacion} = require("../dist/src/Instruccion/Asignacion");
    const {Break} = require("../dist/src/Instruccion/Control/Break");
    const {CWhile} = require("../dist/src/Instruccion/Ciclos/While");
    const {Declaracion} = require("../dist/src/Instruccion/Definiciones/Declaracion");
    const {CDoWhile} = require("../dist/src/Instruccion/Ciclos/DoWhile");
    const {Incremento} = require("../dist/src/Instruccion/Ciclos/Incremento");
    const {Decremento} = require("../dist/src/Instruccion/Ciclos/Decremento");
    const {CFor} = require("../dist/src/Instruccion/Ciclos/For");
    const {Continue} = require("../dist/src/Instruccion/Control/Continue");
    const {Casteo} = require("../dist/src/Expresion/Casteos");
    const {ToLower} = require("../dist/src/Expresion/ToLower");
    const {ToUpper} = require("../dist/src/Expresion/ToUpper");
    const {Round} = require("../dist/src/Expresion/Round");
    const {DeclaracionVector} = require("../dist/src/Estructura/VecDeclar");
    const {AsignacionVector} = require("../dist/src/Estructura/VecAssig");
    const {AccesoVector} = require("../dist/src/Estructura/VerAccess");
    const {Funcion} = require("../dist/src/Instruccion/Definiciones/Funcion");
    const {Metodos} = require("../dist/src/Instruccion/Definiciones/Metodos");
    const {Return} = require("../dist/src/Instruccion/Control/Return");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:return 36;
break;
case 2:return 35;
break;
case 3:return 59;
break;
case 4:return 60;
break;
case 5:return 61;
break;
case 6:return 62;
break;
case 7:return 65;
break;
case 8:return 87;
break;
case 9:return 90;
break;
case 10:return 75;
break;
case 11:return 77;
break;
case 12:return 76;
break;
case 13:return 37;
break;
case 14:return 38;
break;
case 15:return 80;
break;
case 16:return 81;
break;
case 17:return 78;
break;
case 18:return 79;
break;
case 19:return 82;
break;
case 20:return 85;
break;
case 21:return 58;
break;
case 22:return 86;
break;
case 23:return 53;
break;
case 24:return 57;
break;
case 25:return 55;
break;
case 26:return 43;
break;
case 27:return 44;
break;
case 28:return 45;
break;
case 29:return 'LENGTH';
break;
case 30:return 'TYPEOF';
break;
case 31:return 'TOSTRING';
break;
case 32:return 'C_STR';
break;
case 33:return 51;
break;
case 34:return 91;
break;
case 35:return 17;
break;
case 36:return 63;
break;
case 37:return 30;
break;
case 38:return 32;
break;
case 39:return 46;
break;
case 40:return 48;
break;
case 41:return 31;
break;
case 42:return 'PUNTO';
break;
case 43:return 25;
break;
case 44:return 24;
break;
case 45:return 26;
break;
case 46:return 27;
break;
case 47:return 29;
break;
case 48:return 28;
break;
case 49:return 8;
break;
case 50:return 66;
break;
case 51:return 67;
break;
case 52:return 69;
break;
case 53:return 68;
break;
case 54:return 71;
break;
case 55:return 70;
break;
case 56:return 50;
break;
case 57:return 72;
break;
case 58:return 73;
break;
case 59:return 74;
break;
case 60:return 'QMARK';
break;
case 61:return 64;
break;
case 62:return 41;
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 39; 
break;
case 64: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 40; 
break;
case 65:return 5;
break;
case 66:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:BOOL\b)/i,/^(?:CHAR\b)/i,/^(?:STRING\b)/i,/^(?:VOID\b)/i,/^(?:EXECUTE\b)/i,/^(?:COUT\b)/i,/^(?:ENDL\b)/i,/^(?:<<)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:SWITCH\b)/i,/^(?:CASE\b)/i,/^(?:BREAK\b)/i,/^(?:DEFAULT\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:DO\b)/i,/^(?:TOLOWER\b)/i,/^(?:TOUPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LENGTH\b)/i,/^(?:TYPEOF\b)/i,/^(?:TOSTRING\b)/i,/^(?:C_STR\b)/i,/^(?:NEW\b)/i,/^(?:RETURN\b)/i,/^(?:CONTINUE\b)/i,/^(?:STD\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:POW\b)/i,/^(?:%)/i,/^(?:;)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z0-9]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}