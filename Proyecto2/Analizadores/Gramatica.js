/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,23],$V2=[1,24],$V3=[1,26],$V4=[1,27],$V5=[1,25],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,18],$Vd=[1,20],$Ve=[1,21],$Vf=[1,28],$Vg=[1,29],$Vh=[5,17,40,54,56,58,59,60,61,62,63,64,67,77,81,82,84,91,92],$Vi=[2,13],$Vj=[1,41],$Vk=[8,31],$Vl=[1,50],$Vm=[1,49],$Vn=[1,51],$Vo=[1,53],$Vp=[1,52],$Vq=[1,57],$Vr=[1,63],$Vs=[1,64],$Vt=[1,72],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,73],$VA=[1,74],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,80],$VF=[31,40,45],$VG=[1,84],$VH=[1,83],$VI=[1,106],$VJ=[1,105],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,116],$VU=[1,117],$VV=[8,23,24,25,26,27,30,31,47,65,68,69,70,71,72,73,74,75,78],$VW=[2,26],$VX=[1,139],$VY=[30,31,47],$VZ=[5,17,40,54,56,58,59,60,61,62,63,64,67,77,81,82,83,84,91,92],$V_=[30,31],$V$=[8,23,24,30,31,47,65,68,69,70,71,72,73,74,75,78],$V01=[8,30,31,47,65,68,69,70,71,72,73,74,75,78],$V11=[1,199],$V21=[17,40,54,56,58,59,60,61,62,63,64,67,77,82,84,91,92],$V31=[2,86],$V41=[2,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"fn_print":7,"PYC":8,"declaracion":9,"fn_if":10,"fn_switch":11,"incre_o_decre":12,"ciclo_while":13,"inst_break":14,"ciclo_do_while":15,"ciclo_for":16,"CONTINUE":17,"fn_funcion":18,"llamada_funcion":19,"execute":20,"instr_return":21,"expresion":22,"RES":23,"MAS":24,"MUL":25,"DIV":26,"MOD":27,"POW":28,"PARIZQ":29,"COMA":30,"PARDER":31,"relacionales":32,"logicos":33,"NUMBER":34,"DOUBLE":35,"TRUE":36,"FALSE":37,"CADENA":38,"CARACTER":39,"ID":40,"casteos":41,"TOLOWER":42,"TOUPPER":43,"ROUND":44,"CIZQ":45,"lista_expresiones":46,"CDER":47,"PUNTO":48,"LENGTH":49,"tipos":50,"ASIGNACION":51,"NUEVO":52,"asignacion":53,"WHILE":54,"bloque":55,"DO":56,"decla_o_asigna":57,"FOR":58,"BREAK":59,"TIPO_INT":60,"TIPO_DOUBLE":61,"BOOL":62,"CHAR":63,"STD":64,"DPS":65,"STRING":66,"TVOID":67,"IGUAL":68,"DISTINTO":69,"MENOR":70,"MENORIGUAL":71,"MAYOR":72,"MAYORIGUAL":73,"AND":74,"OR":75,"NOT":76,"COUT":77,"CPR":78,"ENDL":79,"LLAVEIZQ":80,"LLAVEDER":81,"IF":82,"ELSE":83,"SWITCH":84,"cases":85,"defaults":86,"CASE":87,"DEFAULT":88,"lista_parametros":89,"parametro":90,"EXEC":91,"RETURN":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",17:"CONTINUE",23:"RES",24:"MAS",25:"MUL",26:"DIV",27:"MOD",28:"POW",29:"PARIZQ",30:"COMA",31:"PARDER",34:"NUMBER",35:"DOUBLE",36:"TRUE",37:"FALSE",38:"CADENA",39:"CARACTER",40:"ID",42:"TOLOWER",43:"TOUPPER",44:"ROUND",45:"CIZQ",47:"CDER",48:"PUNTO",49:"LENGTH",51:"ASIGNACION",52:"NUEVO",54:"WHILE",56:"DO",58:"FOR",59:"BREAK",60:"TIPO_INT",61:"TIPO_DOUBLE",62:"BOOL",63:"CHAR",64:"STD",65:"DPS",66:"STRING",67:"TVOID",68:"IGUAL",69:"DISTINTO",70:"MENOR",71:"MENORIGUAL",72:"MAYOR",73:"MAYORIGUAL",74:"AND",75:"OR",76:"NOT",77:"COUT",78:"CPR",79:"ENDL",80:"LLAVEIZQ",81:"LLAVEDER",82:"IF",83:"ELSE",84:"SWITCH",87:"CASE",88:"DEFAULT",91:"EXEC",92:"RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,6],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3],[22,1],[22,1],[22,1],[22,4],[22,4],[22,4],[22,4],[22,7],[22,1],[22,5],[9,4],[9,10],[9,15],[9,8],[9,16],[53,3],[53,6],[13,5],[15,7],[57,1],[57,1],[12,1],[12,3],[12,3],[16,9],[14,2],[50,1],[50,1],[50,1],[50,1],[50,4],[50,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[33,3],[33,3],[33,2],[7,3],[7,5],[55,3],[55,2],[10,5],[10,7],[10,7],[11,7],[11,8],[11,7],[85,6],[85,5],[86,4],[41,4],[18,5],[18,6],[89,3],[89,1],[90,2],[19,3],[19,4],[46,3],[46,1],[20,2],[21,3],[21,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]); 
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4: case 5: case 8: case 10: case 16: case 17: case 33:
 this.$ = $$[$0-1];
break;
case 6: case 7: case 9: case 11: case 12: case 13: case 15: case 18: case 26: case 27: case 36: case 42: case 53: case 54: case 55:
 this.$ = $$[$0];
break;
case 14:
 this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 19:
 this.$ = new Aritmetica(new Primitivo(0,0,0),$$[$0],OpAritmetica.RESTA,0,0);
break;
case 20:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,0,0);
break;
case 21:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,0,0);
break;
case 22:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,0,0);
break;
case 23:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,0,0);
break;
case 24:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.MODULO,0,0);
break;
case 25:
 this.$ =  new Aritmetica($$[$0-3],$$[$0-1],OpAritmetica.POTENCIA,0,0);
break;
case 28:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,0,0); 
break;
case 29:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,0,0); 
break;
case 30: case 31:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,0,0); 
break;
case 32:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,0,0); 
break;
case 34:
 this.$ =  new Primitivo($$[$0],TipoDato.CHAR,0,0); 
break;
case 35:
 this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 37:
 this.$ = new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 38:
 this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 39:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 40:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 41:
 this.$ = new AccesoVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 43:
 this.$ = new Length($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 44:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 45:
 this.$ = new DeclaracionVector($$[$0-8], [$$[$0-1]], null, $$[$0-9], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 46:
 this.$ = new DeclaracionVector($$[$0-13], [$$[$0-6], $$[$0-3]], null, $$[$0-14], _$[$0-13].first_line, _$[$0-13].first_column);
break;
case 47:
 this.$ = new DeclaracionVector($$[$0-6], [$$[$0-1].length], $$[$0-1], $$[$0-7], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 48:
 this.$ = new DeclaracionVector($$[$0-14], [$$[$0-6].length, $$[$0-2].length], [$$[$0-6], $$[$0-2]], $$[$0-15], _$[$0-14].first_line, _$[$0-14].first_column);
break;
case 49:
 this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 50:
 this.$ = new AsignacionVector($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 51:
this.$ = new CWhile($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 52:
this.$ = new CDoWhile($$[$0-2],$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 56:
 this.$ = new Incremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 57:
 this.$ = new Decremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 58:
this.$ = new CFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 59:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 60:
 this.$ = TipoDato.NUMBER; 
break;
case 61:
 this.$ = TipoDato.DOUBLE; 
break;
case 62:
 this.$ = TipoDato.BOOLEANO; 
break;
case 63:
 this.$ = TipoDato.CHAR; 
break;
case 64:
 this.$ = TipoDato.STRING; 
break;
case 65:
 this.$ = TipoDato.VOID; 
break;
case 66:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,0,0);
break;
case 67:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,0,0);
break;
case 68:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,0,0);
break;
case 69:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,0,0);
break;
case 70:
 this.$ =  new Relacional($$[$0-2].valor,$$[$0],OpRelacional.MAYOR,0,0);
break;
case 71:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,0,0);
break;
case 72:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,0,0);
break;
case 73:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,0,0);
break;
case 74:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,0,0);
break;
case 75:
 this.$ = new Print($$[$0]); 
break;
case 76:
 this.$ = new Print($$[$0-2],true,0,0)
break;
case 77:
 this.$ = new Bloque($$[$0-1]);
break;
case 78:
 this.$ = new Bloque([]) 
break;
case 79:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,0,0);
break;
case 80: case 81:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],0,0);
break;
case 82:
 this.$ = new Switch($$[$0-4],$$[$0-1],null);
break;
case 83:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],0,0);
break;
case 84:
 this.$ = new Switch($$[$0-4],null,$$[$0-1],0,0);
break;
case 85:
 $$[$0-5].push(new Case($$[$0-3], $$[$0-1])); this.$ = $$[$0-5]; 
break;
case 86:
 this.$ = [new Case($$[$0-3], $$[$0-1])]; 
break;
case 87:
 this.$ = new Default($$[$0-1]); 
break;
case 88:
 this.$ = new Casteo($$[$0-2].valor, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 89:
this.$ = new Funcion($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 90:
this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 91: case 96:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 92: case 97:
this.$ = [$$[$0]];
break;
case 93:
this.$ = ({id:$$[$0],tipo:$$[$0-1]}); 
break;
case 94:
this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 95:
this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 98:
this.$ = new Execute($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 99:
this.$ = new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 100:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,82:$Vd,84:$Ve,91:$Vf,92:$Vg},{1:[3]},{5:[1,36],6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,82:$Vd,84:$Ve,91:$Vf,92:$Vg},o($Vh,[2,3]),{8:[1,38]},{8:[1,39]},o($Vh,[2,6]),o($Vh,[2,7]),{8:[1,40]},o($Vh,[2,9]),o($Vh,$Vi,{8:$Vj}),o($Vh,[2,11]),o($Vh,[2,12]),{8:[1,42]},o($Vh,[2,15]),{8:[1,43]},{8:[1,44]},o($Vh,[2,18]),{78:[1,45]},{40:[1,46]},{29:[1,47]},{29:[1,48]},o($Vk,[2,55]),{23:$Vl,24:$Vm,29:$Vn,45:$Vo,51:$Vp},{29:[1,54]},{8:[1,55]},{55:56,80:$Vq},{29:[1,58]},{19:59,40:[1,60]},{8:[1,62],19:79,22:61,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},o($VF,[2,60]),o($VF,[2,61]),o($VF,[2,62]),o($VF,[2,63]),{65:[1,81]},o($VF,[2,65]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,8]),o($Vh,[2,10]),o($Vh,[2,14]),o($Vh,[2,16]),o($Vh,[2,17]),{19:79,22:82,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{29:[1,85],45:$VG,51:$VH},{19:79,22:86,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:87,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{24:[1,88]},{23:[1,89]},{19:79,22:92,23:$Vr,28:$Vs,29:$Vt,31:[1,90],32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,46:91,76:$VE},{19:79,22:93,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:94,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:95,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},o([5,8,17,40,54,56,58,59,60,61,62,63,64,67,77,81,82,84,87,88,91,92],[2,59]),{54:[1,96]},{4:97,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,81:[1,98],82:$Vd,84:$Ve,91:$Vf,92:$Vg},{9:100,40:[1,103],50:102,53:101,57:99,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb},{8:[2,98]},{29:$Vn},{8:[1,104],23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},o($Vh,[2,100]),{19:79,22:118,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{29:[1,119]},o($VV,$VW),o($VV,[2,27]),o($VV,[2,28]),o($VV,[2,29]),o($VV,[2,30]),o($VV,[2,31]),o($VV,[2,32]),{19:79,22:120,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,50:121,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,76:$VE},o($VV,[2,34]),o($VV,[2,35],{29:$Vn,45:[1,122],48:[1,123]}),o($VV,[2,36]),{29:[1,124]},{29:[1,125]},{29:[1,126]},o($VV,[2,42]),{19:79,22:127,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{65:[1,128]},{8:[2,75],23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,78:[1,129]},{19:79,22:130,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{47:[1,131]},{31:[1,132],50:135,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,89:133,90:134},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,136],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,137],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},o($Vk,[2,56]),o($Vk,[2,57]),o($VV,[2,94]),{30:$VX,31:[1,138]},o($VY,[2,97],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU}),o($Vk,[2,49],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU}),{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,47:[1,140],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,141],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{29:[1,142]},{6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,81:[1,143],82:$Vd,84:$Ve,91:$Vf,92:$Vg},o($VZ,[2,78]),{8:[1,144]},{8:[2,53]},{8:[2,54]},{40:[1,145]},{45:$Vo,51:$Vp},o($Vh,[2,99]),{19:79,22:146,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:147,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:148,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:149,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:150,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:151,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:152,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:153,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:154,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:155,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:156,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:157,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:158,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},o($VV,[2,19]),{19:79,22:159,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,160],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{31:[1,161]},{19:79,22:92,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,46:162,76:$VE},{49:[1,163]},{19:79,22:164,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:165,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:166,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},o([8,30,31,47,65,78],[2,74],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU}),{66:[1,167]},{79:[1,168]},{8:[2,44],23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{45:[1,170],51:[1,169]},{55:171,80:$Vq},{30:[1,173],31:[1,172]},o($V_,[2,92]),{40:[1,174]},{55:175,80:$Vq},{80:[1,176]},o($VV,[2,95]),{19:79,22:177,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{51:[1,178]},{55:179,80:$Vq},{19:79,22:180,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},o($VZ,[2,77]),{19:79,22:182,23:$Vr,28:$Vs,29:$Vt,32:181,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{45:$VG,51:$VH},o($V$,[2,20],{25:$VK,26:$VL,27:$VM}),o($V$,[2,21],{25:$VK,26:$VL,27:$VM}),o($VV,[2,22]),o($VV,[2,23]),o($VV,[2,24]),o($V01,[2,66],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM}),o($V01,[2,67],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM}),o($V01,[2,68],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM}),o($V01,[2,69],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM}),o($V01,[2,70],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM}),o($V01,[2,71],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM}),o([8,30,31,47,65,74,75,78],[2,72],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS}),o([8,30,31,47,65,75,78],[2,73],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT}),{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,30:[1,183],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},o($VV,[2,33]),{19:79,22:184,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{30:$VX,47:[1,185]},{29:[1,186]},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,187],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,188],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,189],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},o($VF,[2,64]),{8:[2,76]},{45:[1,191],52:[1,190]},{47:[1,192]},o($Vh,[2,89]),{55:193,80:$Vq},{50:135,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,90:194},o($V_,[2,93]),o($Vh,[2,79],{83:[1,195]}),{85:196,86:197,87:[1,198],88:$V11},o($VY,[2,96],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU}),{19:79,22:200,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},o($Vh,[2,51]),{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,201],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},o([23,24,25,26,27,68,69,70,71,72,73,74,75],$VW,{8:[1,202]}),{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{19:79,22:203,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},o($VV,[2,88]),o($VV,[2,40],{45:[1,204]}),{31:[1,205]},o($VV,[2,37]),o($VV,[2,38]),o($VV,[2,39]),{50:206,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb},{19:79,22:92,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,46:207,76:$VE},{51:[1,208]},o($Vh,[2,90]),o($V_,[2,91]),{10:210,55:209,80:$Vq,82:$Vd},{81:[1,211],86:212,87:[1,213],88:$V11},{81:[1,214]},{19:79,22:215,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{65:[1,216]},o($Vk,[2,50],{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU}),{8:[1,217]},{12:218,40:[1,219],53:22},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,31:[1,220],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{19:79,22:92,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,46:221,76:$VE},o($VV,[2,43]),{45:[1,222]},{30:$VX,47:[1,223]},{45:[1,225],52:[1,224]},o($Vh,[2,80]),o($Vh,[2,81]),o($Vh,[2,82]),{81:[1,226]},{19:79,22:227,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},o($Vh,[2,84]),{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,65:[1,228],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{4:229,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,82:$Vd,84:$Ve,91:$Vf,92:$Vg},o($Vh,[2,52]),{31:[1,230]},{23:$Vl,24:$Vm,45:$Vo,51:$Vp},o($VV,[2,25]),{30:$VX,47:[1,231]},{19:79,22:92,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,46:232,76:$VE},{8:[2,47]},{50:233,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb},{45:[1,234]},o($Vh,[2,83]),{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,65:[1,235],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{4:236,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,82:$Vd,84:$Ve,91:$Vf,92:$Vg},{6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:237,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,82:$Vd,84:$Ve,91:$Vf,92:$Vg},{55:238,80:$Vq},o($VV,[2,41]),{30:$VX,47:[1,239]},{45:[1,240]},{19:79,22:92,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,46:241,76:$VE},{4:242,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,82:$Vd,84:$Ve,91:$Vf,92:$Vg},{6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:243,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,82:$Vd,84:$Ve,91:$Vf,92:$Vg},o($V21,$Vi,{8:$Vj,81:[2,87]}),o($Vh,[2,58]),{8:[2,45]},{19:79,22:92,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,46:244,76:$VE},{30:$VX,47:[1,245]},{6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:246,15:11,16:12,17:$V0,18:14,19:15,20:16,21:17,40:$V1,50:19,53:22,54:$V2,56:$V3,58:$V4,59:$V5,60:$V6,61:$V7,62:$V8,63:$V9,64:$Va,67:$Vb,77:$Vc,82:$Vd,84:$Ve,91:$Vf,92:$Vg},o($V21,$Vi,{8:$Vj,81:$V31,87:$V31,88:$V31}),{30:$VX,47:[1,247]},{30:[1,248]},o($V21,$Vi,{8:$Vj,81:$V41,87:$V41,88:$V41}),{45:[1,249]},{45:[1,250]},{19:79,22:251,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,76:$VE},{19:79,22:92,23:$Vr,28:$Vs,29:$Vt,32:65,33:66,34:$Vu,35:$Vv,36:$Vw,37:$Vx,38:$Vy,39:$Vz,40:$VA,41:75,42:$VB,43:$VC,44:$VD,46:252,76:$VE},{23:$VI,24:$VJ,25:$VK,26:$VL,27:$VM,47:[1,253],68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU},{30:$VX,47:[1,254]},{8:[2,46]},{47:[1,255]},{8:[2,48]}],
defaultActions: {36:[2,1],59:[2,98],100:[2,53],101:[2,54],168:[2,76],223:[2,47],239:[2,45],253:[2,46],255:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../dist/src/Expresion/Aritmetica");
    const {Relacional} = require("../dist/src/Expresion/Relacionales");
    const {Logico} = require("../dist/src/Expresion/Logicos");
    const {Primitivo} = require("../dist/src/Expresion/Primitivo");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../dist/src/Expresion/Resultado");
    const {Print} = require("../dist/src/Instruccion/Print");
    const {Bloque} = require("../dist/src/Instruccion/Bloque");
    const {Llamada} = require("../dist/src/Instruccion/Llamada");
    const {Execute} = require("../dist/src/Instruccion/Execute");
    const {FN_IF} = require("../dist/src/Instruccion/Control/IF");
    const {AST} = require("../dist/src/AST");
    const {Simbolo} = require("../dist/src/TablaSimbolos/Simbolo");
    const {TablaSimbolos} = require("../dist/src/TablaSimbolos/Tablita");
    const {Ternario} = require("../dist/src/Instruccion/Control/Ternario");
    const {Switch} = require("../dist/src/Instruccion/Control/Switch");
    const {Case} = require("../dist/src/Instruccion/Case");
    const {Default} = require("../dist/src/Instruccion/Default");
    const {Acceso} = require("../dist/src/Expresion/Acceso");
    const {Asignacion} = require("../dist/src/Instruccion/Asignacion");
    const {Break} = require("../dist/src/Instruccion/Control/Break");
    const {CWhile} = require("../dist/src/Instruccion/Ciclos/While");
    const {Declaracion} = require("../dist/src/Instruccion/Definiciones/Declaracion");
    const {CDoWhile} = require("../dist/src/Instruccion/Ciclos/DoWhile");
    const {Incremento} = require("../dist/src/Instruccion/Ciclos/Incremento");
    const {Decremento} = require("../dist/src/Instruccion/Ciclos/Decremento");
    const {CFor} = require("../dist/src/Instruccion/Ciclos/For");
    const {Continue} = require("../dist/src/Instruccion/Control/Continue");
    const {Casteo} = require("../dist/src/Expresion/Casteos");
    const {ToLower} = require("../dist/src/Expresion/ToLower");
    const {ToUpper} = require("../dist/src/Expresion/ToUpper");
    const {Round} = require("../dist/src/Expresion/Round");
    const {DeclaracionVector} = require("../dist/src/Estructura/VecDeclar");
    const {AsignacionVector} = require("../dist/src/Estructura/VecAssig");
    const {AccesoVector} = require("../dist/src/Estructura/VerAccess");
    const {Funcion} = require("../dist/src/Instruccion/Definiciones/Funcion");
    const {Metodos} = require("../dist/src/Instruccion/Definiciones/Metodos");
    const {Return} = require("../dist/src/Instruccion/Control/Return");
    const {Length} = require("../dist/src/Expresion/Length");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:return 35;
break;
case 2:return 34;
break;
case 3:return 60;
break;
case 4:return 61;
break;
case 5:return 62;
break;
case 6:return 63;
break;
case 7:return 66;
break;
case 8:return 67;
break;
case 9:return 91;
break;
case 10:return 77;
break;
case 11:return 79;
break;
case 12:return 78;
break;
case 13:return 36;
break;
case 14:return 37;
break;
case 15:return 82;
break;
case 16:return 83;
break;
case 17:return 80;
break;
case 18:return 81;
break;
case 19:return 84;
break;
case 20:return 87;
break;
case 21:return 59;
break;
case 22:return 88;
break;
case 23:return 54;
break;
case 24:return 58;
break;
case 25:return 56;
break;
case 26:return 42;
break;
case 27:return 43;
break;
case 28:return 44;
break;
case 29:return 49;
break;
case 30:return 'TYPEOF';
break;
case 31:return 'TOSTRING';
break;
case 32:return 'C_STR';
break;
case 33:return 52;
break;
case 34:return 92;
break;
case 35:return 17;
break;
case 36:return 64;
break;
case 37:return 29;
break;
case 38:return 31;
break;
case 39:return 45;
break;
case 40:return 47;
break;
case 41:return 30;
break;
case 42:return 48;
break;
case 43:return 24;
break;
case 44:return 23;
break;
case 45:return 25;
break;
case 46:return 26;
break;
case 47:return 28;
break;
case 48:return 27;
break;
case 49:return 8;
break;
case 50:return 68;
break;
case 51:return 69;
break;
case 52:return 71;
break;
case 53:return 70;
break;
case 54:return 73;
break;
case 55:return 72;
break;
case 56:return 51;
break;
case 57:return 74;
break;
case 58:return 75;
break;
case 59:return 76;
break;
case 60:return 'QMARK';
break;
case 61:return 65;
break;
case 62:return 'SALTITO';
break;
case 63:return 'BACKSLASH';
break;
case 64:return 'DOUBLE_QUOTE';
break;
case 65:return 'TAB';
break;
case 66:return 'SINGLE_QUOTE';
break;
case 67:return 40;
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 38; 
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 39; 
break;
case 70:return 5;
break;
case 71:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:BOOL\b)/i,/^(?:CHAR\b)/i,/^(?:STRING\b)/i,/^(?:VOID\b)/i,/^(?:EXECUTE\b)/i,/^(?:COUT\b)/i,/^(?:ENDL\b)/i,/^(?:<<)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:SWITCH\b)/i,/^(?:CASE\b)/i,/^(?:BREAK\b)/i,/^(?:DEFAULT\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:DO\b)/i,/^(?:TOLOWER\b)/i,/^(?:TOUPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LENGTH\b)/i,/^(?:TYPEOF\b)/i,/^(?:TOSTRING\b)/i,/^(?:C_STR\b)/i,/^(?:NEW\b)/i,/^(?:RETURN\b)/i,/^(?:CONTINUE\b)/i,/^(?:STD\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:POW\b)/i,/^(?:%)/i,/^(?:;)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z0-9]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}