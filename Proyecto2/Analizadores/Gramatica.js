/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,25],$V2=[1,19],$V3=[1,20],$V4=[1,22],$V5=[1,23],$V6=[1,21],$V7=[1,24],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,14],$Vc=[1,16],$Vd=[1,17],$Ve=[5,7,31,36,40,42,44,45,46,47,48,49,61,65,66,68],$Vf=[1,32],$Vg=[1,33],$Vh=[1,41],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,48],$Vr=[9,27],$Vs=[1,55],$Vt=[1,59],$Vu=[1,64],$Vv=[1,63],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[9,19,20,21,22,23,26,27,50,52,53,54,55,56,57,58,59,62],$VI=[2,21],$VJ=[5,7,31,36,40,42,44,45,46,47,48,49,61,65,66,67,68],$VK=[9,19,20,26,27,50,52,53,54,55,56,57,58,59,62],$VL=[9,26,27,50,52,53,54,55,56,57,58,59,62],$VM=[1,133],$VN=[65,71,72];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"EXEC":7,"expresion":8,"PYC":9,"fn_print":10,"declaracion":11,"fn_if":12,"fn_switch":13,"incre_o_decre":14,"ciclo_while":15,"inst_break":16,"ciclo_do_while":17,"ciclo_for":18,"RES":19,"MAS":20,"MUL":21,"DIV":22,"MOD":23,"POW":24,"PARIZQ":25,"COMA":26,"PARDER":27,"relacionales":28,"logicos":29,"NUMBER":30,"DOUBLE":31,"TRUE":32,"FALSE":33,"CADENA":34,"CARACTER":35,"ID":36,"tipos":37,"ASIGNACION":38,"asignacion":39,"WHILE":40,"bloque":41,"DO":42,"decla_o_asigna":43,"FOR":44,"BREAK":45,"INT":46,"BOOL":47,"CHAR":48,"STD":49,"DPS":50,"STRING":51,"IGUAL":52,"DISTINTO":53,"MENOR":54,"MENORIGUAL":55,"MAYOR":56,"MAYORIGUAL":57,"AND":58,"OR":59,"NOT":60,"COUT":61,"CPR":62,"ENDL":63,"LLAVEIZQ":64,"LLAVEDER":65,"IF":66,"ELSE":67,"SWITCH":68,"cases":69,"defaults":70,"CASE":71,"DEFAULT":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"EXEC",9:"PYC",19:"RES",20:"MAS",21:"MUL",22:"DIV",23:"MOD",24:"POW",25:"PARIZQ",26:"COMA",27:"PARDER",30:"NUMBER",31:"DOUBLE",32:"TRUE",33:"FALSE",34:"CADENA",35:"CARACTER",36:"ID",38:"ASIGNACION",40:"WHILE",42:"DO",44:"FOR",45:"BREAK",46:"INT",47:"BOOL",48:"CHAR",49:"STD",50:"DPS",51:"STRING",52:"IGUAL",53:"DISTINTO",54:"MENOR",55:"MENORIGUAL",56:"MAYOR",57:"MAYORIGUAL",58:"AND",59:"OR",60:"NOT",61:"COUT",62:"CPR",63:"ENDL",64:"LLAVEIZQ",65:"LLAVEDER",66:"IF",67:"ELSE",68:"SWITCH",71:"CASE",72:"DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,6],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,1],[8,1],[11,4],[39,3],[15,5],[17,7],[43,1],[43,1],[14,1],[14,3],[14,3],[18,9],[16,2],[37,1],[37,1],[37,1],[37,1],[37,4],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[29,3],[29,3],[29,2],[10,3],[10,5],[41,3],[41,2],[12,5],[12,7],[12,7],[13,7],[13,8],[13,7],[69,6],[69,5],[70,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]); 
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4:
 this.$ =  $$[$0-1];
break;
case 5: case 6: case 9: case 11: case 28:
 this.$ = $$[$0-1];
break;
case 7: case 8: case 10: case 12: case 13: case 21: case 22: case 35: case 36: case 37:
 this.$ = $$[$0];
break;
case 14:
 this.$ = new Aritmetica(new Primitivo(0,0,0),$$[$0],OpAritmetica.RESTA,0,0);
break;
case 15:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,0,0);
break;
case 16:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,0,0);
break;
case 17:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,0,0);
break;
case 18:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,0,0);
break;
case 19:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.MODULO,0,0);
break;
case 20:
 this.$ =  new Aritmetica($$[$0-3],$$[$0-1],OpAritmetica.POTENCIA,0,0);
break;
case 23:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,0,0); 
break;
case 24:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,0,0); 
break;
case 25: case 26:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,0,0); 
break;
case 27:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,0,0); 
break;
case 29:
 this.$ =  new Primitivo($$[$0],TipoDato.CHAR,0,0); 
break;
case 30:
 this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 31:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 32:
 this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 33:
this.$ = new CWhile($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 34:
this.$ = new CDoWhile($$[$0-2],$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 38:
 this.$ = new Incremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 39:
 this.$ = new Decremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 40:
this.$ = new CFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 41:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 42:
 this.$ = TipoDato.NUMBER; 
break;
case 43:
 this.$ = TipoDato.DOUBLE; 
break;
case 44:
 this.$ = TipoDato.BOOLEANO; 
break;
case 45:
 this.$ = TipoDato.CHAR; 
break;
case 46:
 this.$ = TipoDato.STRING; 
break;
case 47:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,0,0);
break;
case 48:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,0,0);
break;
case 49:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,0,0);
break;
case 50:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,0,0);
break;
case 51:
 this.$ =  new Relacional($$[$0-2].valor,$$[$0],OpRelacional.MAYOR,0,0);
break;
case 52:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,0,0);
break;
case 53:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,0,0);
break;
case 54:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,0,0);
break;
case 55:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,0,0);
break;
case 56:
 this.$ = new Print($$[$0]); 
break;
case 57:
 this.$ = new Print($$[$0-2],true,0,0)
break;
case 58:
 this.$ = new Bloque($$[$0-1]);
break;
case 59:
 this.$ = new Bloque([]) 
break;
case 60:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,0,0);
break;
case 61: case 62:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],0,0);
break;
case 63:
 this.$ = new Switch($$[$0-4],$$[$0-1],null);
break;
case 64:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],0,0);
break;
case 65:
 this.$ = new Switch($$[$0-4],null,$$[$0-1],0,0);
break;
case 66:
 $$[$0-5].push(new Case($$[$0-3], $$[$0-1])); this.$ = $$[$0-5]; 
break;
case 67:
 this.$ = [new Case($$[$0-3], $$[$0-1])]; 
break;
case 68:
 this.$ = new Default($$[$0-1]); 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,66:$Vc,68:$Vd},{1:[3]},{5:[1,29],6:30,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,66:$Vc,68:$Vd},o($Ve,[2,3]),{8:31,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{9:[1,45]},{9:[1,46]},o($Ve,[2,7]),o($Ve,[2,8]),{9:[1,47]},o($Ve,[2,10]),{9:$Vq},o($Ve,[2,12]),o($Ve,[2,13]),{62:[1,49]},{36:[1,50]},{25:[1,51]},{25:[1,52]},o($Vr,[2,37]),{19:[1,54],20:[1,53],38:$Vs},{25:[1,56]},{9:[1,57]},{41:58,64:$Vt},{25:[1,60]},{36:[2,42]},{36:[2,43]},{36:[2,44]},{36:[2,45]},{50:[1,61]},{1:[2,1]},o($Ve,[2,2]),{9:[1,62],19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},{8:76,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{25:[1,77]},o($VH,$VI),o($VH,[2,22]),o($VH,[2,23]),o($VH,[2,24]),o($VH,[2,25]),o($VH,[2,26]),o($VH,[2,27]),{8:78,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},o($VH,[2,29]),o($VH,[2,30]),{8:79,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,9]),o($Ve,[2,11]),{8:80,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{38:[1,81]},{8:82,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:83,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{20:[1,84]},{19:[1,85]},{8:86,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:87,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},o([9,65,71,72],[2,41]),{40:[1,88]},{4:89,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,65:[1,90],66:$Vc,68:$Vd},{11:92,31:$V1,36:[1,94],37:15,39:93,43:91,46:$V7,47:$V8,48:$V9,49:$Va},{50:[1,95]},o($Ve,[2,4]),{8:96,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:97,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:98,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:99,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:100,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:101,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:102,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:103,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:104,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:105,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:106,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:107,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{8:108,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},o($VH,[2,14]),{8:109,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,27:[1,110],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},o([9,26,27,50,62],[2,55],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),{9:[2,56],19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,62:[1,111]},{8:112,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,27:[1,113],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,27:[1,114],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},o($Vr,[2,38]),o($Vr,[2,39]),o($Vr,[2,32],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,27:[1,115],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},{25:[1,116]},{6:30,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,65:[1,117],66:$Vc,68:$Vd},o($VJ,[2,59]),{9:[1,118]},{9:[2,35]},{9:[2,36]},{38:$Vs},{51:[1,119]},o($VK,[2,15],{21:$Vw,22:$Vx,23:$Vy}),o($VK,[2,16],{21:$Vw,22:$Vx,23:$Vy}),o($VH,[2,17]),o($VH,[2,18]),o($VH,[2,19]),o($VL,[2,47],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy}),o($VL,[2,48],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy}),o($VL,[2,49],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy}),o($VL,[2,50],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy}),o($VL,[2,51],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy}),o($VL,[2,52],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy}),o([9,26,27,50,58,59,62],[2,53],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE}),o([9,26,27,50,59,62],[2,54],{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF}),{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,26:[1,120],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},o($VH,[2,28]),{63:[1,121]},{9:[2,31],19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},{41:122,64:$Vt},{64:[1,123]},{41:124,64:$Vt},{8:125,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},o($VJ,[2,58]),{8:127,19:$Vf,24:$Vg,25:$Vh,28:126,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{36:[2,46]},{8:128,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{9:[2,57]},o($Ve,[2,60],{67:[1,129]}),{69:130,70:131,71:[1,132],72:$VM},o($Ve,[2,33]),{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,27:[1,134],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},o([19,20,21,22,23,52,53,54,55,56,57,58,59],$VI,{9:[1,135]}),{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,27:[1,136],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},{12:138,41:137,64:$Vt,66:$Vc},{65:[1,139],70:140,71:[1,141],72:$VM},{65:[1,142]},{8:143,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},{50:[1,144]},{9:[1,145]},{14:146,36:$V2,39:18},o($VH,[2,20]),o($Ve,[2,61]),o($Ve,[2,62]),o($Ve,[2,63]),{65:[1,147]},{8:148,19:$Vf,24:$Vg,25:$Vh,28:34,29:35,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,60:$Vp},o($Ve,[2,65]),{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,50:[1,149],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},{4:150,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,66:$Vc,68:$Vd},o($Ve,[2,34]),{27:[1,151]},o($Ve,[2,64]),{19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,50:[1,152],52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG},{4:153,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,66:$Vc,68:$Vd},{6:30,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:154,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,66:$Vc,68:$Vd},{41:155,64:$Vt},{4:156,6:3,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,66:$Vc,68:$Vd},{6:30,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:157,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,66:$Vc,68:$Vd},{9:$Vq,65:[2,68]},o($Ve,[2,40]),{6:30,7:$V0,10:5,11:6,12:7,13:8,14:9,15:10,16:158,17:12,18:13,31:$V1,36:$V2,37:15,39:18,40:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,61:$Vb,66:$Vc,68:$Vd},o($VN,[2,67],{9:$Vq}),o($VN,[2,66],{9:$Vq})],
defaultActions: {24:[2,42],25:[2,43],26:[2,44],27:[2,45],29:[2,1],92:[2,35],93:[2,36],119:[2,46],121:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../dist/src/Expresion/Aritmetica");
    const {Relacional} = require("../dist/src/Expresion/Relacionales");
    const {Logico} = require("../dist/src/Expresion/Logicos");
    const {Primitivo} = require("../dist/src/Expresion/Primitivo");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../dist/src/Expresion/Resultado");
    const {Print} = require("../dist/src/Instruccion/Print");
    const {Bloque} = require("../dist/src/Instruccion/Bloque");
    const {FN_IF} = require("../dist/src/Instruccion/Control/IF");
    const {AST} = require("../dist/src/AST");
    const {Simbolo} = require("../dist/src/TablaSimbolos/Simbolo");
    const {TablaSimbolos} = require("../dist/src/TablaSimbolos/Tablita");
    const {Ternario} = require("../dist/src/Instruccion/Control/Ternario");
    const {Switch} = require("../dist/src/Instruccion/Control/Switch");
    const {Case} = require("../dist/src/Instruccion/Case");
    const {Default} = require("../dist/src/Instruccion/Default");
    const {Acceso} = require("../dist/src/Expresion/Acceso");
    const {Asignacion} = require("../dist/src/Instruccion/Asignacion");
    const {Break} = require("../dist/src/Instruccion/Control/Break");
    const {CWhile} = require("../dist/src/Instruccion/Ciclos/While");
    const {Declaracion} = require("../dist/src/Instruccion/Definiciones/Declaracion");
    const {CDoWhile} = require("../dist/src/Instruccion/Ciclos/DoWhile");
    const {Incremento} = require("../dist/src/Instruccion/Ciclos/Incremento");
    const {Decremento} = require("../dist/src/Instruccion/Ciclos/Decremento");
    const {CFor} = require("../dist/src/Instruccion/Ciclos/For");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:return 31;
break;
case 2:return 30;
break;
case 3:return 46;
break;
case 4:return 31;
break;
case 5:return 47;
break;
case 6:return 48;
break;
case 7:return 51;
break;
case 8:return 7;
break;
case 9:return 61;
break;
case 10:return 63;
break;
case 11:return 62;
break;
case 12:return 32;
break;
case 13:return 33;
break;
case 14:return 66;
break;
case 15:return 67;
break;
case 16:return 64;
break;
case 17:return 65;
break;
case 18:return 68;
break;
case 19:return 71;
break;
case 20:return 45;
break;
case 21:return 72;
break;
case 22:return 40;
break;
case 23:return 44;
break;
case 24:return 42;
break;
case 25:return 'TOLOWER';
break;
case 26:return 'TOUPPER';
break;
case 27:return 'ROUND';
break;
case 28:return 'LENGTH';
break;
case 29:return 'TYPEOF';
break;
case 30:return 'TOSTRING';
break;
case 31:return 'C_STR';
break;
case 32:return 'NUEVO';
break;
case 33:return 'RETURN';
break;
case 34:return 'CONTINUE';
break;
case 35:return 49;
break;
case 36:return 25;
break;
case 37:return 27;
break;
case 38:return 'CIZQ';
break;
case 39:return 'CDER';
break;
case 40:return 26;
break;
case 41:return 'PUNTO';
break;
case 42:return 20;
break;
case 43:return 19;
break;
case 44:return 21;
break;
case 45:return 22;
break;
case 46:return 24;
break;
case 47:return 23;
break;
case 48:return 9;
break;
case 49:return 52;
break;
case 50:return 53;
break;
case 51:return 55;
break;
case 52:return 54;
break;
case 53:return 57;
break;
case 54:return 56;
break;
case 55:return 38;
break;
case 56:return 58;
break;
case 57:return 59;
break;
case 58:return 60;
break;
case 59:return 'QMARK';
break;
case 60:return 50;
break;
case 61:return 36;
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 34; 
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 35; 
break;
case 64:return 5;
break;
case 65:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:BOOL\b)/i,/^(?:CHAR\b)/i,/^(?:STRING\b)/i,/^(?:EXECUTE\b)/i,/^(?:COUT\b)/i,/^(?:ENDL\b)/i,/^(?:<<)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:SWITCH\b)/i,/^(?:CASE\b)/i,/^(?:BREAK\b)/i,/^(?:DEFAULT\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:DO\b)/i,/^(?:TOLOWER\b)/i,/^(?:TOUPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LENGTH\b)/i,/^(?:TYPEOF\b)/i,/^(?:TOSTRING\b)/i,/^(?:C_STR\b)/i,/^(?:NEW\b)/i,/^(?:RETURN\b)/i,/^(?:CONTINUE\b)/i,/^(?:STD\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:POW\b)/i,/^(?:%)/i,/^(?:;)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z0-9]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}