/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,11],$V2=[1,10],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,9],$V7=[1,15],$V8=[1,16],$V9=[5,7,26,31,33,34,35,47,52,53,55,57,58],$Va=[1,20],$Vb=[1,21],$Vc=[1,29],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,30],$Vj=[1,31],$Vk=[1,44],$Vl=[1,43],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[9,14,15,16,17,18,21,22,36,38,39,40,41,42,43,44,45,48],$Vy=[9,14,15,21,22,36,38,39,40,41,42,43,44,45,48],$Vz=[9,21,22,36,38,39,40,41,42,43,44,45,48],$VA=[1,95],$VB=[5,7,26,31,33,34,35,47,52,53,54,55,57,58],$VC=[52,57,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"EXEC":7,"expresion":8,"PYC":9,"fn_print":10,"declaracion":11,"fn_if":12,"fn_switch":13,"RES":14,"MAS":15,"MUL":16,"DIV":17,"MOD":18,"POW":19,"PARIZQ":20,"COMA":21,"PARDER":22,"relacionales":23,"logicos":24,"NUMBER":25,"DOUBLE":26,"TRUE":27,"FALSE":28,"CADENA":29,"ID":30,"INT":31,"ASIGNACION":32,"BOOL":33,"CHAR":34,"STD":35,"DPS":36,"STRING":37,"IGUAL":38,"DISTINTO":39,"MENOR":40,"MENORIGUAL":41,"MAYOR":42,"MAYORIGUAL":43,"AND":44,"OR":45,"NOT":46,"COUT":47,"CPR":48,"ENDL":49,"bloque":50,"LLAVEIZQ":51,"LLAVEDER":52,"IF":53,"ELSE":54,"SWITCH":55,"cases":56,"defaults":57,"CASE":58,"default":59,"DEFAULT":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"EXEC",9:"PYC",14:"RES",15:"MAS",16:"MUL",17:"DIV",18:"MOD",19:"POW",20:"PARIZQ",21:"COMA",22:"PARDER",25:"NUMBER",26:"DOUBLE",27:"TRUE",28:"FALSE",29:"CADENA",30:"ID",31:"INT",32:"ASIGNACION",33:"BOOL",34:"CHAR",35:"STD",36:"DPS",37:"STRING",38:"IGUAL",39:"DISTINTO",40:"MENOR",41:"MENORIGUAL",42:"MAYOR",43:"MAYORIGUAL",44:"AND",45:"OR",46:"NOT",47:"COUT",48:"CPR",49:"ENDL",51:"LLAVEIZQ",52:"LLAVEDER",53:"IF",54:"ELSE",55:"SWITCH",57:"defaults",58:"CASE",60:"DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,2],[6,2],[6,1],[6,1],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,6],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,1],[11,4],[11,4],[11,4],[11,4],[11,7],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[24,3],[24,3],[24,2],[10,3],[10,5],[50,3],[50,2],[12,5],[12,7],[12,7],[13,7],[13,8],[13,7],[56,5],[56,4],[59,3],[59,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 tablaSimbolos.imprimir(); return new AST($$[$0-1]);
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4:
 this.$ =  $$[$0-1];
break;
case 5: case 6: case 23:
 this.$ = $$[$0-1];
break;
case 7: case 8: case 17:
 this.$ = $$[$0];
break;
case 9:
 this.$ = new Aritmetica(new Primitivo(0,0,0),$$[$0],OpAritmetica.RESTA,0,0);
break;
case 10:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.SUMA,0,0);
break;
case 11:
 this.$ = new Aritmetica($$[$0-2],$$[$0],OpAritmetica.RESTA,0,0);
break;
case 12:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.PRODUCTO,0,0);
break;
case 13:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.DIVISION,0,0);
break;
case 14:
 this.$ =  new Aritmetica($$[$0-2],$$[$0],OpAritmetica.MODULO,0,0);
break;
case 15:
 this.$ =  new Aritmetica($$[$0-3],$$[$0-1],OpAritmetica.POTENCIA,0,0);
break;
case 16:
 this.$ = $$[$0].interpretar();
break;
case 18:
 this.$ = new Primitivo($$[$0],TipoDato.NUMBER,0,0); 
break;
case 19:
 this.$ =  new Primitivo($$[$0],TipoDato.DOUBLE,0,0); 
break;
case 20: case 21:
 this.$ =  new Primitivo($$[$0],TipoDato.BOOLEANO,0,0); 
break;
case 22:
 this.$ =  new Primitivo($$[$0],TipoDato.STRING,0,0); 
break;
case 24:
 let simbolo = tablaSimbolos.obtener($$[$0]);
    if (simbolo) {
        this.$ = new Primitivo(simbolo.valor, simbolo.tipo, _$[$0].first_line, _$[$0].first_column);
    } else {
        console.error(`Error: Variable ${$$[$0]} no definida.`);
        this.$ = new Primitivo(null, TipoDato.NULO, _$[$0].first_line, _$[$0].first_column);
    }

break;
case 25:
 
        let resultadoNumero = $$[$0].interpretar();
        this.$ = new Simbolo($$[$0-2], TipoDato.NUMBER, resultadoNumero.valor, _$[$0-2].first_line, _$[$0-2].first_column);
        tablaSimbolos.guardar($$[$0-2], TipoDato.NUMBER, resultadoNumero.valor, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 26:
 
        let resultadoDouble = $$[$0].interpretar();
        this.$ = new Simbolo($$[$0-2], TipoDato.DOUBLE, resultadoDouble.valor, _$[$0-2].first_line, _$[$0-2].first_column);
        tablaSimbolos.guardar($$[$0-2], TipoDato.DOUBLE, resultadoDouble.valor, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 27:
 
        let resultadoBool = $$[$0].interpretar();
        this.$ = new Simbolo($$[$0-2], TipoDato.BOOLEANO, resultadoBool.valor, _$[$0-2].first_line, _$[$0-2].first_column);
        tablaSimbolos.guardar($$[$0-2], TipoDato.BOOLEANO, resultadoBool.valor, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 28:
 
        let resultadoChar = $$[$0].interpretar();
        this.$ = new Simbolo($$[$0-2], TipoDato.CHAR, resultadoChar.valor, _$[$0-2].first_line, _$[$0-2].first_column);
        tablaSimbolos.guardar($$[$0-2], TipoDato.CHAR, resultadoChar.valor, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 29:
 
        let resultadoString = $$[$0].interpretar();
        this.$ = new Simbolo($$[$0-2], TipoDato.STRING, resultadoString.valor, _$[$0-2].first_line, _$[$0-2].first_column);
        tablaSimbolos.guardar($$[$0-2], TipoDato.STRING, resultadoString.valor, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 30:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.IGUAL,0,0);
break;
case 31:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.DISTINTO,0,0);
break;
case 32:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENOR,0,0);
break;
case 33:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MENORIGUAL,0,0);
break;
case 34:
 this.$ =  new Relacional($$[$0-2].valor,$$[$0],OpRelacional.MAYOR,0,0);
break;
case 35:
 this.$ =  new Relacional($$[$0-2],$$[$0],OpRelacional.MAYORIGUAL,0,0);
break;
case 36:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.AND,0,0);
break;
case 37:
 this.$ =  new Logico($$[$0-2],$$[$0],OpLogico.OR,0,0);
break;
case 38:
 this.$ =  new Logico(null,$$[$0],OpLogico.NOT,0,0);
break;
case 39:
 this.$ = new Print($$[$0]); 
break;
case 40:
 this.$ = new Print($$[$0-2],true,0,0)
break;
case 41:
 this.$ = new Bloque($$[$0-1]);
break;
case 42:
 this.$ = new Bloque([]) 
break;
case 43:
 this.$ = new FN_IF($$[$0-2],$$[$0],null,0,0);
break;
case 44: case 45:
 this.$ = new FN_IF($$[$0-4],$$[$0-2],$$[$0],0,0);
break;
case 46:
 this.$ = new Switch($$[$0-4],$$[$0-1],null);
break;
case 47:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],0,0);
break;
case 48:
 this.$ = new Switch($$[$0-4],null,$$[$0-2],0,0);
break;
case 49:
 $$[$0-4].push(new Case($$[$0-2], $$[$0])); this.$ = $$[$0-4]; 
break;
case 50:
 this.$ = new Case($$[$0-2], $$[$0]); 
break;
case 51:
 this.$ = new Default($$[$0]); 
break;
case 52:
 this.$ = null; 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,10:5,11:6,12:7,13:8,26:$V1,31:$V2,33:$V3,34:$V4,35:$V5,47:$V6,53:$V7,55:$V8},{1:[3]},{5:[1,17],6:18,7:$V0,10:5,11:6,12:7,13:8,26:$V1,31:$V2,33:$V3,34:$V4,35:$V5,47:$V6,53:$V7,55:$V8},o($V9,[2,3]),{8:19,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{9:[1,32]},{9:[1,33]},o($V9,[2,7]),o($V9,[2,8]),{48:[1,34]},{30:[1,35]},{30:[1,36]},{30:[1,37]},{30:[1,38]},{36:[1,39]},{20:[1,40]},{20:[1,41]},{1:[2,1]},o($V9,[2,2]),{9:[1,42],14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{8:56,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{20:[1,57]},o($Vx,[2,16]),o($Vx,[2,17]),o($Vx,[2,18]),o($Vx,[2,19]),o($Vx,[2,20]),o($Vx,[2,21]),o($Vx,[2,22]),{8:58,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},o($Vx,[2,24]),{8:59,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},o($V9,[2,5]),o($V9,[2,6]),{8:60,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{32:[1,61]},{32:[1,62]},{32:[1,63]},{32:[1,64]},{36:[1,65]},{8:66,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:67,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},o($V9,[2,4]),{8:68,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:69,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:70,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:71,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:72,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:73,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:74,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:75,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:76,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:77,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:78,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:79,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:80,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},o($Vx,[2,9]),{8:81,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,22:[1,82],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},o([9,21,22,36,48],[2,38],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw}),{9:[2,39],14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,48:[1,83]},{8:84,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:85,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:86,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{8:87,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{37:[1,88]},{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,22:[1,89],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,22:[1,90],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},o($Vy,[2,10],{16:$Vm,17:$Vn,18:$Vo}),o($Vy,[2,11],{16:$Vm,17:$Vn,18:$Vo}),o($Vx,[2,12]),o($Vx,[2,13]),o($Vx,[2,14]),o($Vz,[2,30],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo}),o($Vz,[2,31],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo}),o($Vz,[2,32],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo}),o($Vz,[2,33],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo}),o($Vz,[2,34],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo}),o($Vz,[2,35],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo}),o([9,21,22,36,44,45,48],[2,36],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu}),o([9,21,22,36,45,48],[2,37],{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv}),{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,21:[1,91],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},o($Vx,[2,23]),{49:[1,92]},{9:[2,25],14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{9:[2,26],14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{9:[2,27],14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{9:[2,28],14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{30:[1,93]},{50:94,51:$VA},{51:[1,96]},{8:97,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{9:[2,40]},{32:[1,98]},o($V9,[2,43],{54:[1,99]}),{4:100,6:3,7:$V0,10:5,11:6,12:7,13:8,26:$V1,31:$V2,33:$V3,34:$V4,35:$V5,47:$V6,52:[1,101],53:$V7,55:$V8},{56:102,57:[1,103],58:[1,104]},{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,22:[1,105],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{8:106,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},{12:108,50:107,51:$VA,53:$V7},{6:18,7:$V0,10:5,11:6,12:7,13:8,26:$V1,31:$V2,33:$V3,34:$V4,35:$V5,47:$V6,52:[1,109],53:$V7,55:$V8},o($VB,[2,42]),{52:[1,110],57:[1,111],58:[1,112]},{52:[1,113]},{8:114,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},o($Vx,[2,15]),{9:[2,29],14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},o($V9,[2,44]),o($V9,[2,45]),o($VB,[2,41]),o($V9,[2,46]),{52:[1,115]},{8:116,14:$Va,19:$Vb,20:$Vc,23:22,24:23,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,46:$Vj},o($V9,[2,48]),{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,36:[1,117],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},o($V9,[2,47]),{14:$Vk,15:$Vl,16:$Vm,17:$Vn,18:$Vo,36:[1,118],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{4:119,6:3,7:$V0,10:5,11:6,12:7,13:8,26:$V1,31:$V2,33:$V3,34:$V4,35:$V5,47:$V6,53:$V7,55:$V8},{4:120,6:3,7:$V0,10:5,11:6,12:7,13:8,26:$V1,31:$V2,33:$V3,34:$V4,35:$V5,47:$V6,53:$V7,55:$V8},o($VC,[2,50],{10:5,11:6,12:7,13:8,6:18,7:$V0,26:$V1,31:$V2,33:$V3,34:$V4,35:$V5,47:$V6,53:$V7,55:$V8}),o($VC,[2,49],{10:5,11:6,12:7,13:8,6:18,7:$V0,26:$V1,31:$V2,33:$V3,34:$V4,35:$V5,47:$V6,53:$V7,55:$V8})],
defaultActions: {17:[2,1],92:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica} = require("../dist/src/Expresion/Aritmetica");
    const {Relacional} = require("../dist/src/Expresion/Relacionales");
    const {Logico} = require("../dist/src/Expresion/Logicos");
    const {Primitivo} = require("../dist/src/Expresion/Primitivo");
    const {OpAritmetica,OpRelacional,OpLogico,TipoDato} = require("../dist/src/Expresion/Resultado");
    const {Print} = require("../dist/src/Instruccion/Print");
    const {Bloque} = require("../dist/src/Instruccion/Bloque");
    const {FN_IF} = require("../dist/src/Instruccion/Control/IF");
    const {AST} = require("../dist/src/AST");
    const {Simbolo} = require("../dist/src/TablaSimbolos/Simbolo");
    const {TablaSimbolos} = require("../dist/src/TablaSimbolos/Tablita");
    const {Ternario} = require("../dist/src/Instruccion/Control/Ternario");
    const {Switch} = require("../dist/src/Instruccion/Control/Switch");
    const {Case} = require("../dist/src/Instruccion/Case");
    const {Default} = require("../dist/src/Instruccion/Default");
    let tablaSimbolos = new TablaSimbolos();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:return 26;
break;
case 2:return 25;
break;
case 3:return 31;
break;
case 4:return 26;
break;
case 5:return 33;
break;
case 6:return 34;
break;
case 7:return 37;
break;
case 8:return 7;
break;
case 9:return 47;
break;
case 10:return 49;
break;
case 11:return 48;
break;
case 12:return 27;
break;
case 13:return 28;
break;
case 14:return 53;
break;
case 15:return 54;
break;
case 16:return 51;
break;
case 17:return 52;
break;
case 18:return 55;
break;
case 19:return 58;
break;
case 20:return 'BREAK';
break;
case 21:return 60;
break;
case 22:return 'WHILE';
break;
case 23:return 'FOR';
break;
case 24:return 'DO';
break;
case 25:return 'TOLOWER';
break;
case 26:return 'TOUPPER';
break;
case 27:return 'ROUND';
break;
case 28:return 'LENGTH';
break;
case 29:return 'TYPEOF';
break;
case 30:return 'TOSTRING';
break;
case 31:return 'C_STR';
break;
case 32:return 'NUEVO';
break;
case 33:return 'RETURN';
break;
case 34:return 'CONTINUE';
break;
case 35:return 35;
break;
case 36:return 20;
break;
case 37:return 22;
break;
case 38:return 'CIZQ';
break;
case 39:return 'CDER';
break;
case 40:return 21;
break;
case 41:return 'PUNTO';
break;
case 42:return 15;
break;
case 43:return 14;
break;
case 44:return 16;
break;
case 45:return 17;
break;
case 46:return 19;
break;
case 47:return 18;
break;
case 48:return 9;
break;
case 49:return 38;
break;
case 50:return 39;
break;
case 51:return 41;
break;
case 52:return 40;
break;
case 53:return 43;
break;
case 54:return 42;
break;
case 55:return 32;
break;
case 56:return 44;
break;
case 57:return 45;
break;
case 58:return 46;
break;
case 59:return 'QMARK';
break;
case 60:return 36;
break;
case 61:return 30;
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 29; 
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 'CARACTER'; 
break;
case 64:return 5;
break;
case 65:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:BOOL\b)/i,/^(?:CHAR\b)/i,/^(?:STRING\b)/i,/^(?:EXECUTE\b)/i,/^(?:COUT\b)/i,/^(?:ENDL\b)/i,/^(?:<<)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:SWITCH\b)/i,/^(?:CASE\b)/i,/^(?:BREAK\b)/i,/^(?:DEFAULT\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:DO\b)/i,/^(?:TOLOWER\b)/i,/^(?:TOUPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LENGTH\b)/i,/^(?:TYPEOF\b)/i,/^(?:TOSTRING\b)/i,/^(?:C_STR\b)/i,/^(?:NEW\b)/i,/^(?:RETURN\b)/i,/^(?:CONTINUE\b)/i,/^(?:STD\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:POW\b)/i,/^(?:%)/i,/^(?:;)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z0-9]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}